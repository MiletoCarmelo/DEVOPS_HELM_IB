==== ./Chart.yaml ====

apiVersion: v2
name: ib-gateway
description: A Helm chart for deploying Interactive Brokers Gateway on Kubernetes
type: application
version: 0.1.0
appVersion: "1.0.0"

# Ajout d'une icône (optionnel mais recommandé)
icon: https://www.interactivebrokers.com/images/web/logos/ib-logo-dark.svg

# Informations sur le maintainer
maintainers:
  - name: Qantor Capital
    email: contact@qantorcapital.com

# Mots-clés pour faciliter la recherche
keywords:
  - trading
  - interactive-brokers
  - gateway
  - finance

# Annotations additionnelles
annotations:
  category: Finance

# Type de licence
license: MIT

==== ./.github/workflows/repo-initialization.yml ====

name: Repository initialization

on:
  repository_dispatch:
    types: [initialize]
    
  workflow_dispatch:

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  create-branches:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Create release/uat branch
      if:  ${{startsWith(env.REPO_NAME, 'DEVOPS_') || startsWith(env.REPO_NAME, 'INF_') || startsWith(env.REPO_NAME, 'DEV_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: refs/heads/release/uat

    - name: Create release/prod branch
      if:  ${{startsWith(env.REPO_NAME, 'DEVOPS_') || startsWith(env.REPO_NAME, 'INF_') || startsWith(env.REPO_NAME, 'DEV_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: refs/heads/release/prod

    - name: Create github-pages branch
      if: ${{startsWith(env.REPO_NAME, 'DEVOPS_HELM_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: github-pages

    - name: Create DEV branch
      if: ${{startsWith(env.REPO_NAME, 'QUA_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: DEV

    - name: Create prod branch
      if: ${{startsWith(env.REPO_NAME, 'QUA_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: prod


==== ./.github/workflows/ci.yml ====

name: CI

on:
  push:
    branches:
      - main

env:
  BRANCH_PAGES: github-pages
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ib-gateway

permissions:
  contents: write
  packages: write

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/arm64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: 'linux/amd64,linux/arm64'

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase IMAGE_NAME
        id: set_image_name
        run: |
          echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-chart:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update values.yaml with new image
        run: |
          sed -i "s|repository:.*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}|" ./values.yaml
          sed -i "s|tag:.*|tag: latest|" ./values.yaml

      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: ..
          branch: ${{ env.BRANCH_PAGES }}
          charts_url: https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}
          linting: false

      - name: Summary
        run: |
          echo "Chart URL: https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest"

==== ./templates/deployment.yaml ====

# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ib-gateway
  namespace: {{ .Values.namespace.name }}
  labels:
    app: ib-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ib-gateway
  template:
    metadata:
      labels:
        app: ib-gateway
    spec:
      containers:
        - name: ib-gateway
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: tws
              containerPort: {{ .Values.ibgateway.port }}
              protocol: TCP
            - name: api
              containerPort: {{ .Values.ibgateway.apiPort }}
              protocol: TCP
            {{- if .Values.vnc.enabled }}
            - name: vnc
              containerPort: {{ .Values.vnc.port }}
              protocol: TCP
            {{- end }}
          env:
            - name: TWS_USERID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: username
            - name: TWS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: password
            - name: IB_ACCOUNT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: account
          envFrom:
            - configMapRef:
                name: ib-gateway-config
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: data
              mountPath: /root/IBController/Logs
          {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: ib-gateway-pvc
      {{- end }}

==== ./templates/service.yaml ====

apiVersion: v1
kind: Service
metadata:
  name: ib-gateway
  namespace: {{ .Values.namespace.name }}
  labels:
    app: ib-gateway
spec:
  type: LoadBalancer
  ports:
    - port: {{ .Values.ibgateway.port }}
      targetPort: tws
      protocol: TCP
      name: tws
    - port: {{ .Values.ibgateway.apiPort }}
      targetPort: api
      protocol: TCP
      name: api
    - port: 6080
      targetPort: 6080
      protocol: TCP
      name: novnc
    {{- if .Values.vnc.enabled }}
    - port: {{ .Values.vnc.port }}
      targetPort: vnc
      protocol: TCP
      name: vnc
    {{- end }}
  selector:
    app: ib-gateway

==== ./templates/pvc.yaml ====

# templates/pvc.yaml
{{- if .Values.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ib-gateway-pvc
  namespace: {{ .Values.namespace.name }}
  labels:
    app: ib-gateway
spec:
  accessModes:
    - {{ .Values.persistence.accessMode }}
  storageClassName: {{ .Values.persistence.storageClass }}
  resources:
    requests:
      storage: {{ .Values.persistence.size }}
{{- end }}

==== ./templates/configmap.yaml ====

# templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ib-gateway-config
  labels:
    app: ib-gateway
data:
  TWS_PORT: "{{ .Values.ibgateway.port }}"
  API_PORT: "{{ .Values.ibgateway.apiPort }}"
  TRADING_MODE: "{{ .Values.ibgateway.mode }}"
  TZ: "{{ .Values.ibgateway.timezone }}"
  LOG_LEVEL: "{{ .Values.logging.level }}"
  {{- if .Values.security.autoRestartOnDisconnect }}
  IBC_AUTO_RESTART_ON_DISCONNECT: "yes"
  {{- end }}
  {{- if .Values.vnc.enabled }}
  VNC_SERVER_PASSWORD: "{{ .Values.vnc.password }}"
  {{- end }}

==== ./templates/networkpolicy.yaml ====

{{- if .Values.security.allowedIPs }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ib-gateway-access
  namespace: {{ .Values.namespace.name }}
spec:
  podSelector:
    matchLabels:
      app: ib-gateway
  policyTypes:
    - Ingress
  ingress:
    - from:
        {{- range .Values.security.allowedIPs }}
        - ipBlock:
            cidr: {{ . }}
        {{- end }}
      ports:
        - protocol: TCP
          port: {{ .Values.ibgateway.port }}
        - protocol: TCP
          port: {{ .Values.ibgateway.apiPort }}
        {{- if .Values.vnc.enabled }}
        - protocol: TCP
          port: {{ .Values.vnc.port }}
        {{- end }}
{{- end }}

==== ./values.yaml ====

# Configuration du namespace
namespace:
  name: "trading"

# Configuration du secret
secret:
  name: "ib-gateway-secrets"

# Configuration de l'image
image:
  repository: ghcr.io/uijin/ib-gateway-arm64
  tag: latest
  pullPolicy: IfNotPresent

# Configuration IB Gateway
ibgateway:
  mode: "paper"  # "paper" ou "live"
  port: "4001"
  apiPort: "4002"
  timezone: "Europe/Paris"

# Configuration VNC
vnc:
  enabled: true
  port: "5900"
  password: "myVNCpass"

# Configuration du service
service:
  type: LoadBalancer  # Changé pour permettre l'accès externe
  annotations: {}     # Pour cloud providers spécifiques

# Configuration des ressources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "1Gi"
    cpu: "500m"

# Configuration du stockage
persistence:
  enabled: true
  size: "1Gi"
  accessMode: ReadWriteOnce
  storageClass: "local-path"

# Configuration de la sécurité
security:
  autoRestartOnDisconnect: true
  allowedIPs: []  # Nouvelle option pour la sécurité réseau
  # Example:
  # allowedIPs:
  #   - "192.168.1.0/24"
  #   - "10.0.0.0/8"

# Configuration des logs
logging:
  level: "INFO"
  persistence:
    enabled: true
    size: "500Mi"
    retention: "7d"

# Configuration supervisor (nouveau)
supervisor:
  enabled: true
  logLevel: "info"

# Configuration des sondes (nouveau)
probes:
  readiness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
  liveness:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 20

